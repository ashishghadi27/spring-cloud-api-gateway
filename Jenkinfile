node {
    def WORKSPACE = "/var/lib/jenkins/workspace/springboot-deploy"
    def dockerImageTag = "springboot-deploy${env.BUILD_NUMBER}"
    try{
        notifyBuild('STARTED')
        stage('Clone Repo') {
            // for display purposes
            // Get some code from a GitHub repository
            git url: 'https://github.com/ashishghadi27/spring-cloud-api-gateway.git',
                    credentialsId: 'githubCred',
                    branch: 'master'
        }
        stage('Initialize'){
            def dockerHome = tool 'SpringBootDocker'
            env.PATH = "${dockerHome}/bin:${env.PATH}"
            withMaven {
                  sh "mvn clean install "
            }
        }
        stage('Build'){
            withMaven(
                    // Maven installation declared in the Jenkins "Global Tool Configuration"
                    maven: 'maven-3', // (1)
                    // Use `$WORKSPACE/.repository` for local repository folder to avoid shared repositories
                    mavenLocalRepo: '.repository', // (2)
                    // Maven settings.xml file defined with the Jenkins Config File Provider Plugin
                    // We recommend to define Maven settings.xml globally at the folder level using
                    // navigating to the folder configuration in the section "Pipeline Maven Configuration / Override global Maven configuration"
                    // or globally to the entire master navigating to  "Manage Jenkins / Global Tools Configuration"
                    mavenSettingsConfig: 'MySettings' // (3)
                ) {

                  // Run the maven build
                  sh "mvn clean install -DskipTests"

                }
        }
        stage('Build docker') {
            dockerImage = docker.build("springboot-deploy:${env.BUILD_NUMBER}")
        }
        stage('Deploy docker'){
            echo "Docker Image Tag Name: ${dockerImageTag}"
            sh "docker stop springboot-deploy || true && docker rm springboot-deploy || true"
            sh "docker run --name springboot-deploy -d -p 8081:8081 springboot-deploy:${env.BUILD_NUMBER}"
        }
    }catch(e){
        currentBuild.result = "FAILED"
        throw e
    }finally{
        notifyBuild(currentBuild.result)
    }
}


def notifyBuild(String buildStatus = 'STARTED'){

    // build status of null means successful
    buildStatus =  buildStatus ?: 'SUCCESSFUL'

    // Default values
    def colorName = 'RED'
    def colorCode = '#FF0000'
    def now = new Date()

    // message
    def subject = "${buildStatus}, Job: ${env.JOB_NAME} FRONTEND - Deployment Sequence: [${env.BUILD_NUMBER}] "
    def summary = "${subject} - Check On: (${env.BUILD_URL}) - Time: ${now}"
    def subject_email = "Spring boot Deployment"
    def details = """<p>${buildStatus} JOB </p>
    <p>Job: ${env.JOB_NAME} - Deployment Sequence: [${env.BUILD_NUMBER}] - Time: ${now}</p>
    <p>Check console output at "<a href="${env.BUILD_URL}">${env.JOB_NAME}</a>"</p>"""

    // Email notification
    emailext (
            to: "rootdevs27@gmail.com",
            subject: subject_email,
            body: details,
            recipientProviders: [[$class: 'DevelopersRecipientProvider']]
    )

}